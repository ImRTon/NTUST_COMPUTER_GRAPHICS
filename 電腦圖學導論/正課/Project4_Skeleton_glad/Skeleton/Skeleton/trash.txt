		/*
		if (!this->plane) {
			GLfloat  vertices[] = {
				-0.5f ,0.0f , -0.5f,
				-0.5f ,0.0f , 0.5f ,
				0.5f ,0.0f ,0.5f ,
				0.5f ,0.0f ,-0.5f };
			GLfloat  normal[] = {
				0.0f, 1.0f, 0.0f,
				0.0f, 1.0f, 0.0f,
				0.0f, 1.0f, 0.0f,
				0.0f, 1.0f, 0.0f };
			GLfloat  texture_coordinate[] = {
				0.0f, 0.0f,
				0.5f, 0.0f,
				1.0f, 0.0f,
				1.0f, 0.5f,
				1.0f, 1.0f,
				0.5f, 1.0f,
				0.0f, 1.0f,
				0.0f, 0.5f,
				//0.5f, 0.5f,
			};
			GLuint element[] = {
				0, 1, 2,
				0, 2, 3, };

			this->plane = new VAO;
			this->plane->element_amount = sizeof(element) / sizeof(GLuint);
			glGenVertexArrays(1, &this->plane->vao);
			glGenBuffers(3, this->plane->vbo);
			glGenBuffers(1, &this->plane->ebo);

			glBindVertexArray(this->plane->vao);

			// Position attribute
			glBindBuffer(GL_ARRAY_BUFFER, this->plane->vbo[0]);
			glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
			glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);
			glEnableVertexAttribArray(0);

			// Normal attribute
			glBindBuffer(GL_ARRAY_BUFFER, this->plane->vbo[1]);
			glBufferData(GL_ARRAY_BUFFER, sizeof(normal), normal, GL_STATIC_DRAW);
			glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(GLfloat), (GLvoid*)0);
			glEnableVertexAttribArray(1);

			// Texture Coordinate attribute
			glBindBuffer(GL_ARRAY_BUFFER, this->plane->vbo[2]);
			glBufferData(GL_ARRAY_BUFFER, sizeof(texture_coordinate), texture_coordinate, GL_STATIC_DRAW);
			glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(GLfloat), (GLvoid*)0);
			glEnableVertexAttribArray(2);

			//Element attribute
			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, this->plane->ebo);
			glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(element), element, GL_STATIC_DRAW);

			// Unbind VAO
			glBindVertexArray(0);
		}*/


		//---------------------------------------------------
			//bind VAO
	//glBindVertexArray(this->plane->vao);

	//glDrawElements(GL_TRIANGLES, this->plane->element_amount, GL_UNSIGNED_INT, 0);

	//unbind VAO
	//glBindVertexArray(0);



		/*
	glm::mat4 model_matrix = glm::mat4();
	model_matrix = glm::translate(model_matrix, this->source_pos);
	model_matrix = glm::scale(model_matrix, glm::vec3(50.0f, 50.0f, 50.0f));
	glUniformMatrix4fv(glGetUniformLocation(this->shader->Program, "u_model"), 1, GL_FALSE, &model_matrix[0][0]);
	glUniform3fv(glGetUniformLocation(this->shader->Program, "u_color"), 1, &glm::vec3(0.0f, 1.0f, 0.0f)[0]);
	this->texture->bind(0);

	glUniform1i(glGetUniformLocation(this->shader->Program, "u_texture"), 0);

	GLfloat view[16];
	glGetFloatv(GL_MODELVIEW_MATRIX, view);
	glm::mat4 view_inv = glm::inverse(glm::make_mat4(view));
	glm::vec3 my_pos(view_inv[3][0], view_inv[3][1], view_inv[3][2]);
	std::cout << view_inv[3][0] << ' ' << view_inv[3][1] << ' ' << view_inv[3][2] << std::endl;
	//glm::vec3 my_pos(view_inv[0][3], view_inv[1][3], view_inv[2][3]);

	glUniform3f(glGetUniformLocation(this->shader->Program, "viewPos"), my_pos[0], my_pos[1], my_pos[2]);
	//Direction light
	glUniform3f(glGetUniformLocation(this->shader->Program, "dirLight.direction"), 0.0f, 1.5f, 0.0f);
	glUniform3f(glGetUniformLocation(this->shader->Program, "dirLight.ambient"), 1.0f, 1.0f, 0.00f);
	glUniform3f(glGetUniformLocation(this->shader->Program, "dirLight.diffuse"), 0.4f, 0.4f, 0.4f);
	glUniform3f(glGetUniformLocation(this->shader->Program, "dirLight.specular"), 0.5f, 0.5f, 0.5f);
	//Point light
	glUniform3f(glGetUniformLocation(this->shader->Program, "pointLights.position"), 0, 3, 0);
	glUniform3f(glGetUniformLocation(this->shader->Program, "pointLights.direction"), 1.0f, 0.5f, 0.0f);
	glUniform3f(glGetUniformLocation(this->shader->Program, "pointLights.ambient"), 1.0f, 0.0f, 0.00f);
	glUniform3f(glGetUniformLocation(this->shader->Program, "pointLights.diffuse"), 0.8f, 0.8f, 0.8f);
	glUniform3f(glGetUniformLocation(this->shader->Program, "pointLights.specular"), 1.0f, 1.0f, 1.0f);
	glUniform1f(glGetUniformLocation(this->shader->Program, "pointLights.constant"), 1.0f);
	glUniform1f(glGetUniformLocation(this->shader->Program, "pointLights.linear"), 0.09f);
	glUniform1f(glGetUniformLocation(this->shader->Program, "pointLights.quadratic"), 0.032f);
	//spot light

	//glUniform3f(glGetUniformLocation(this->shader->Program, "spotLight.position"), 0.0f, 5.0f, 0.0f);
	//glUniform3f(glGetUniformLocation(this->shader->Program, "spotLight.direction"), 0.0f, -1.0f, 0.0f);
	//glUniform3f(glGetUniformLocation(this->shader->Program, "spotLight.ambient"), 1.0f, 0.0f, 0.0f);
	//glUniform3f(glGetUniformLocation(this->shader->Program, "spotLight.diffuse"), 1.0f, 1.0f, 1.0f);
	//glUniform3f(glGetUniformLocation(this->shader->Program, "spotLight.specular"), 1.0f, 1.0f, 1.0f);
	//glUniform1f(glGetUniformLocation(this->shader->Program, "spotLight.constant"), 1.0f);
	//glUniform1f(glGetUniformLocation(this->shader->Program, "spotLight.linear"), 0.09f);
	//glUniform1f(glGetUniformLocation(this->shader->Program, "spotLight.quadratic"), 0.032f);
	//glUniform1f(glGetUniformLocation(this->shader->Program, "spotLight.cutOff"), 0.09f);
	//glUniform1f(glGetUniformLocation(this->shader->Program, "spotLight.quadratic"), glm::cos(glm::radians(12.5f)));
	//glUniform1f(glGetUniformLocation(this->shader->Program, "spotLight.outerCutOff"), glm::cos(glm::radians(12.5f)));
	glUniform3f(glGetUniformLocation(this->shader->Program, "spotLight.position"),0,5,0);
	glUniform3f(glGetUniformLocation(this->shader->Program, "spotLight.direction"),0, 1, 0);
	glUniform3f(glGetUniformLocation(this->shader->Program, "spotLight.ambient"),1, 0, 0);
	glUniform3f(glGetUniformLocation(this->shader->Program, "spotLight.diffuse"),1.0f,1.0f,1.0f);
	glUniform3f(glGetUniformLocation(this->shader->Program, "spotLight.specular"),1.0f, 1.0f, 1.0f);
	glUniform1f(glGetUniformLocation(this->shader->Program, "spotLight.constant"), 1.0f);
	glUniform1f(glGetUniformLocation(this->shader->Program, "spotLight.linear"), 0.09f);
	glUniform1f(glGetUniformLocation(this->shader->Program, "spotLight.quadratic"), 0.032f);
	glUniform1f(glGetUniformLocation(this->shader->Program, "spotLight.cutOff"), glm::cos(glm::radians(12.5f)));
	glUniform1f(glGetUniformLocation(this->shader->Program, "spotLight.outerCutOff"), glm::cos(glm::radians(15.0f)));

	glUniform1f(glGetUniformLocation(this->shader->Program, "material.diffuse"), 0.0f);
	glUniform1f(glGetUniformLocation(this->shader->Program, "material.specular"), 1.0f);
	glUniform1f(glGetUniformLocation(this->shader->Program, "material.shininess"), 32.0f);
	*/
